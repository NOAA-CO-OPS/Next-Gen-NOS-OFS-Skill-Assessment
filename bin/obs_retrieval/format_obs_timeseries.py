'''
 Abstract:

   This script takes the pandas dataframes generated by the observation
   retrieval scripts and reformats them before writing the observation time
   series to file (.obs). This script has two functions, one for scalar data
   (water level, water temperature, and salinity) and one for vector data
   (currents).

'''
from datetime import datetime
import pandas as pd
import math
import numpy as np


def scalar(timeseries, Start_Date_full, End_Date_full):
    Start_dt_full = datetime.strptime(Start_Date_full, '%Y%m%d-%H:%M:%S')
    End_dt_full = datetime.strptime(End_Date_full, '%Y%m%d-%H:%M:%S')

    mask = (timeseries['DateTime'] >= Start_dt_full) & \
        (timeseries['DateTime'] <= End_dt_full)
    timeseries = timeseries.loc[mask]

    julian = pd.arrays.DatetimeArray(timeseries['DateTime']).to_julian_date()# - pd.Timestamp(datetime.strptime(str('Start_dt_full.year'), '%Y')).to_julian_date()
    julian = julian.round(4)

    year = pd.to_datetime(timeseries['DateTime']).dt.strftime('%Y').to_numpy()
    month = pd.to_datetime(timeseries['DateTime']).dt.strftime('%m').to_numpy()
    day = pd.to_datetime(timeseries['DateTime']).dt.strftime('%d').to_numpy()
    hour = pd.to_datetime(timeseries['DateTime']).dt.strftime('%H').to_numpy()
    minute = pd.to_datetime(timeseries['DateTime']).dt.strftime('%M').to_numpy()

    #Filter out missing data values
    timeseries['OBS'] = np.where(timeseries['OBS'] < -999 ,
                                 np.nan, timeseries['OBS'])
    timeseries['OBS'] = np.where(timeseries['OBS'] > 999 ,
                                 np.nan, timeseries['OBS'])

    obs = timeseries['OBS'].to_numpy()

    formatted_series = []
    for i in range(len(obs)):
        formatted_series.\
            append('{:13.8f} {:4d} {:2d} {:2d} {:2d} {:2d} {:9.4f}'\
                   .format(float(julian[i]),
                           int(year[i]),
                           int(month[i]),
                           int(day[i]),
                           int(hour[i]),
                           int(minute[i]),
                           float(obs[i])))

    return formatted_series


def vector(timeseries, Start_Date_full, End_Date_full):
    Start_dt_full = datetime.strptime(Start_Date_full, '%Y%m%d-%H:%M:%S')
    End_dt_full = datetime.strptime(End_Date_full, '%Y%m%d-%H:%M:%S')

#    timeseries['DateTime'] = pd.to_datetime(timeseries['DateTime'])
    mask = (timeseries['DateTime'] >= Start_dt_full) &\
        (timeseries['DateTime'] <= End_dt_full)
    timeseries = timeseries.loc[mask]

    julian = pd.arrays.DatetimeArray(timeseries['DateTime']).to_julian_date()# - pd.Timestamp(datetime.strptime(str('Start_dt_full.year'), '%Y')).to_julian_date()
    julian = julian.round(4)

    year = pd.to_datetime(timeseries['DateTime']).dt.strftime('%Y').to_numpy()
    month = pd.to_datetime(timeseries['DateTime']).dt.strftime('%m').to_numpy()
    day = pd.to_datetime(timeseries['DateTime']).dt.strftime('%d').to_numpy()
    hour = pd.to_datetime(timeseries['DateTime']).dt.strftime('%H').to_numpy()
    minute = pd.to_datetime(timeseries['DateTime']).dt.strftime('%M').to_numpy()

    #Filter out missing data values
    timeseries['OBS'] = np.where(timeseries['OBS'] < -999 ,
                                 np.nan, timeseries['OBS'])
    timeseries['OBS'] = np.where(timeseries['OBS'] > 999 ,
                                 np.nan, timeseries['OBS'])
    timeseries['DIR'] = np.where(timeseries['DIR'] < -999 ,
                                 np.nan, timeseries['DIR'])
    timeseries['DIR'] = np.where(timeseries['DIR'] > 999 ,
                                 np.nan, timeseries['DIR'])


    obs = timeseries['OBS'].to_numpy()

    ang = timeseries['DIR'].to_numpy()

    #obs, all currents data (NDBC and TAC) have direction as clockwise starting from N. That is why u is sin(angle) and v is cos(angle) below:
    u,v = [],[]
    for i in range(len(ang)):
        u.append(float(obs[i])*math.sin(math.radians(float(ang[i]))))
        v.append(float(obs[i])*math.cos(math.radians(float(ang[i]))))

    formatted_series = []
    for i in range(len(obs)):
        formatted_series.\
            append('{:13.8f} {:4d} {:2d} {:2d} {:2d} {:2d} {:9.4f} {:9.4f} {:9.4f} {:9.4f}'.format(
                   float(julian[i]),
                   int(year[i]),
                   int(month[i]),
                   int(day[i]),
                   int(hour[i]),
                   int(minute[i]),
                   float(obs[i]),
                   float(ang[i]),
                   float(u[i]),
                   float(v[i])))

    return formatted_series
